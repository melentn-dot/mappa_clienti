<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mappa Clienti - Distribuzione Edilizia</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            height: 100vh;
            display: flex;
        }
        .sidebar {
            width: 350px;
            background: white;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
            color: white;
            padding: 20px;
        }
        .header h1 {
            font-size: 22px;
            margin-bottom: 5px;
        }
        .header p {
            font-size: 13px;
            opacity: 0.9;
        }
        .upload-section {
            padding: 20px;
            text-align: center;
        }
        .upload-btn {
            background: #2563eb;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 15px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: background 0.3s;
        }
        .upload-btn:hover {
            background: #1d4ed8;
        }
        .upload-btn:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }
        .filter-section {
            padding: 20px;
            border-bottom: 1px solid #e5e7eb;
        }
        .filter-section label {
            font-size: 13px;
            font-weight: 600;
            color: #374151;
            display: block;
            margin-bottom: 8px;
        }
        .filter-section select, .filter-section input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
        }
        .stats {
            padding: 15px 20px;
            background: #f9fafb;
            border-bottom: 1px solid #e5e7eb;
        }
        .stats-row {
            display: flex;
            gap: 15px;
            font-size: 12px;
        }
        .stat-item {
            display: flex;
            align-items: center;
            gap: 6px;
        }
        .stat-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }
        .dot-primary { background: #2563eb; }
        .dot-secondary { background: #f97316; }
        .progress-bar {
            background: #dbeafe;
            border-radius: 6px;
            padding: 10px;
            margin-top: 10px;
        }
        .progress-text {
            font-size: 12px;
            color: #1e40af;
            margin-bottom: 6px;
        }
        .progress-fill {
            height: 6px;
            background: #2563eb;
            border-radius: 3px;
            transition: width 0.3s;
        }
        .customer-list {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
        }
        .customer-card {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 10px;
            transition: all 0.2s;
        }
        .customer-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        .customer-card.secondary {
            background: #fff7ed;
            border-color: #fed7aa;
        }
        .customer-name {
            font-weight: 600;
            font-size: 14px;
            color: #111827;
            margin-bottom: 4px;
        }
        .customer-badge {
            display: inline-block;
            font-size: 11px;
            background: #fed7aa;
            color: #9a3412;
            padding: 2px 8px;
            border-radius: 4px;
            margin-bottom: 6px;
        }
        .customer-city {
            font-size: 12px;
            color: #6b7280;
            margin-bottom: 6px;
        }
        .customer-contact {
            font-size: 12px;
        }
        .customer-contact a {
            color: #2563eb;
            text-decoration: none;
        }
        #map {
            flex: 1;
            position: relative;
        }
        .map-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.95);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        .overlay-content {
            text-align: center;
            padding: 30px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        .overlay-icon {
            font-size: 64px;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="header">
            <h1>üèóÔ∏è Mappa Clienti</h1>
            <p>Distribuzione Materiali Edilizia</p>
        </div>
        
        <div class="upload-section" id="uploadSection">
            <input type="file" id="fileInput" accept=".xlsx,.xls" style="display: none">
            <button class="upload-btn" onclick="document.getElementById('fileInput').click()">
                üìÅ Carica Excel Clienti
            </button>
            <p style="font-size: 12px; color: #6b7280; margin-top: 10px;">Carica il file per visualizzare la mappa</p>
        </div>

        <div id="filterSection" style="display: none;">
            <div class="filter-section">
                <label>üîç Filtra per provincia</label>
                <select id="provinceFilter">
                    <option value="">-- Tutte le province --</option>
                </select>
            </div>

            <div class="filter-section" style="border-bottom: none;">
                <label>üîé Cerca cliente</label>
                <input type="text" id="searchInput" placeholder="Nome o citt√†...">
            </div>

            <div class="stats" id="statsSection"></div>

            <div class="customer-list" id="customerList"></div>
        </div>
    </div>

    <div id="map"></div>
    <div class="map-overlay" id="mapOverlay">
        <div class="overlay-content">
            <div class="overlay-icon">üìç</div>
            <h2>Carica il file Excel</h2>
            <p style="color: #6b7280; margin-top: 10px;">per visualizzare i clienti sulla mappa</p>
        </div>
    </div>

    <script>
        let map;
        let markers = [];
        let customers = [];
        let provinces = new Set();

        // Inizializza mappa
        map = L.map('map').setView([45.4642, 9.19], 7);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors'
        }).addTo(map);

        // Gestione upload file
        document.getElementById('fileInput').addEventListener('change', handleFileUpload);
        document.getElementById('provinceFilter').addEventListener('change', filterByProvince);
        document.getElementById('searchInput').addEventListener('input', filterCustomers);

        async function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const sheet = workbook.Sheets[workbook.SheetNames[0]];
                const jsonData = XLSX.utils.sheet_to_json(sheet);

                processCustomers(jsonData);
            };
            reader.readAsArrayBuffer(file);
        }

        function processCustomers(data) {
            customers = [];
            provinces.clear();

            data.forEach((row, index) => {
                if (row['Indirizzo'] && row['Localita']) {
                    const match = row['Localita'].match(/\(([A-Z]{2})\)/);
                    const province = match ? match[1] : '';
                    if (province) provinces.add(province);

                    customers.push({
                        id: `primary-${index}`,
                        name: row['Nome Cliente'],
                        address: `${row['Indirizzo']}, ${row['Localita']}, Italy`,
                        email: row['Email'],
                        phone: row['Telefono'],
                        mobile: row['Cellulare'],
                        type: 'primary',
                        fullAddress: row['Indirizzo'],
                        city: row['Localita'],
                        province: province
                    });
                }

                if (row['Indirizzo Secondario di consegna'] && row['Localita Indirizzo Secondario di consegna']) {
                    const match = row['Localita Indirizzo Secondario di consegna'].match(/\(([A-Z]{2})\)/);
                    const province = match ? match[1] : '';
                    if (province) provinces.add(province);

                    customers.push({
                        id: `secondary-${index}`,
                        name: row['Nome Cliente'],
                        address: `${row['Indirizzo Secondario di consegna']}, ${row['Localita Indirizzo Secondario di consegna']}, Italy`,
                        email: row['Email'],
                        phone: row['Telefono'],
                        mobile: row['Cellulare'],
                        type: 'secondary',
                        descSede: row['DescSede'],
                        fullAddress: row['Indirizzo Secondario di consegna'],
                        city: row['Localita Indirizzo Secondario di consegna'],
                        province: province
                    });
                }
            });

            // Aggiorna UI
            document.getElementById('uploadSection').style.display = 'none';
            document.getElementById('filterSection').style.display = 'block';
            document.getElementById('mapOverlay').style.display = 'none';

            // Popola filtro province
            const provinceFilter = document.getElementById('provinceFilter');
            Array.from(provinces).sort().forEach(prov => {
                const count = customers.filter(c => c.province === prov).length;
                const option = document.createElement('option');
                option.value = prov;
                option.textContent = `${prov} (${count} clienti)`;
                provinceFilter.appendChild(option);
            });

            updateStats();
            renderCustomerList(customers);

            // Se ci sono meno di 50 clienti, caricali tutti
            if (customers.length <= 50) {
                geocodeCustomers(customers);
            }
        }

        function updateStats(filtered = customers) {
            const primary = filtered.filter(c => c.type === 'primary').length;
            const secondary = filtered.filter(c => c.type === 'secondary').length;

            document.getElementById('statsSection').innerHTML = `
                <div class="stats-row">
                    <div class="stat-item">
                        <div class="stat-dot dot-primary"></div>
                        <span>Principale: ${primary}</span>
                    </div>
                    <div class="stat-item">
                        <div class="stat-dot dot-secondary"></div>
                        <span>Secondario: ${secondary}</span>
                    </div>
                </div>
            `;
        }

        function renderCustomerList(customersToShow) {
            const list = document.getElementById('customerList');
            list.innerHTML = customersToShow.slice(0, 100).map(c => `
                <div class="customer-card ${c.type === 'secondary' ? 'secondary' : ''}">
                    <div class="customer-name">${c.name}</div>
                    ${c.type === 'secondary' ? '<div class="customer-badge">üìç Indirizzo secondario</div>' : ''}
                    <div class="customer-city">${c.city}</div>
                    <div class="customer-contact">
                        ${c.email ? `<a href="mailto:${c.email}">‚úâÔ∏è Email</a><br>` : ''}
                        ${c.phone ? `<a href="tel:${c.phone}">üìû ${c.phone}</a>` : ''}
                    </div>
                </div>
            `).join('');
        }

        async function geocodeCustomers(customersToGeocode) {
            // Rimuovi marker esistenti
            markers.forEach(m => map.removeLayer(m));
            markers = [];

            const bounds = L.latLngBounds();
            let loaded = 0;

            // Mostra progress
            const statsSection = document.getElementById('statsSection');
            const progressDiv = document.createElement('div');
            progressDiv.className = 'progress-bar';
            progressDiv.innerHTML = `
                <div class="progress-text">Caricamento marker: <span id="progressText">0 / ${customersToGeocode.length}</span></div>
                <div class="progress-fill" id="progressFill" style="width: 0%"></div>
            `;
            statsSection.appendChild(progressDiv);

            for (const customer of customersToGeocode) {
                try {
                    const response = await fetch(
                        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(customer.address)}&limit=1`,
                        { headers: { 'User-Agent': 'CustomerMapApp' } }
                    );
                    const data = await response.json();

                    if (data && data.length > 0) {
                        const lat = parseFloat(data[0].lat);
                        const lon = parseFloat(data[0].lon);

                        const icon = L.divIcon({
                            className: 'custom-marker',
                            html: `<div style="background-color: ${customer.type === 'primary' ? '#2563eb' : '#f97316'}; width: 14px; height: 14px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);"></div>`,
                            iconSize: [14, 14],
                            iconAnchor: [7, 7]
                        });

                        const popupContent = `
                            <div style="font-family: system-ui; min-width: 250px; padding: 8px;">
                                ${customer.type === 'secondary' ? `<div style="background: #fed7aa; color: #9a3412; padding: 6px 10px; border-radius: 6px; margin-bottom: 10px; font-size: 12px; font-weight: 600;">üìç INDIRIZZO SECONDARIO${customer.descSede ? ` - ${customer.descSede}` : ''}</div>` : ''}
                                <div style="font-weight: 600; font-size: 15px; margin-bottom: 8px;">${customer.name}</div>
                                <div style="font-size: 13px; color: #64748b; margin-bottom: 10px;">üìç ${customer.fullAddress}<br/>${customer.city}</div>
                                ${customer.email ? `<div style="margin: 6px 0; font-size: 13px;"><a href="mailto:${customer.email}" style="color: #2563eb; text-decoration: none;">‚úâÔ∏è ${customer.email}</a></div>` : ''}
                                ${customer.phone ? `<div style="margin: 6px 0; font-size: 13px;"><a href="tel:${customer.phone}" style="color: #2563eb; text-decoration: none;">üìû ${customer.phone}</a></div>` : ''}
                            </div>
                        `;

                        const marker = L.marker([lat, lon], { icon }).addTo(map);
                        marker.bindPopup(popupContent);
                        markers.push(marker);
                        bounds.extend([lat, lon]);

                        loaded++;
                        document.getElementById('progressText').textContent = `${loaded} / ${customersToGeocode.length}`;
                        document.getElementById('progressFill').style.width = `${(loaded / customersToGeocode.length) * 100}%`;
                    }

                    await new Promise(resolve => setTimeout(resolve, 1100));
                } catch (error) {
                    console.error(`Errore per ${customer.name}:`, error);
                }
            }

            if (markers.length > 0) {
                map.fitBounds(bounds, { padding: [50, 50] });
            }

            // Rimuovi progress bar dopo 2 secondi
            setTimeout(() => {
                if (progressDiv.parentNode) {
                    progressDiv.remove();
                }
            }, 2000);
        }

        function filterByProvince(event) {
            const province = event.target.value;
            const filtered = province ? customers.filter(c => c.province === province) : customers;
            
            updateStats(filtered);
            renderCustomerList(filtered);

            if (province && filtered.length <= 50) {
                geocodeCustomers(filtered);
            } else if (!province) {
                // Rimuovi tutti i marker
                markers.forEach(m => map.removeLayer(m));
                markers = [];
            }
        }

        function filterCustomers(event) {
            const search = event.target.value.toLowerCase();
            const province = document.getElementById('provinceFilter').value;
            
            let filtered = customers;
            if (province) {
                filtered = filtered.filter(c => c.province === province);
            }
            if (search) {
                filtered = filtered.filter(c => 
                    c.name.toLowerCase().includes(search) ||
                    c.city.toLowerCase().includes(search)
                );
            }

            updateStats(filtered);
            renderCustomerList(filtered);
        }
    </script>
</body>
</html>
